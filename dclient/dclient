#!/usr/bin/python3
from dclient.util.config import Config
from dclient.controllers.rollout import post_rollout
from dclient.controllers.rollback import post_rollback
from dclient.util.core import set_state, register_dclient
from dclient.controllers.healthcheck import get_healthcheck
from dclient.controllers.versionlock import get_versionlock

import gunicorn.app.base
from flask import Flask, request

import logging.handlers

formatter = logging.Formatter("%(asctime)s %(levelname)s %(name)s %(threadName)s : %(message)s")

rotating_log_handeler = logging.handlers.RotatingFileHandler(Config.LOG_FILE, maxBytes=int(Config.LOG_MAX_BYTES),
                                                             backupCount=int(Config.LOG_BACKUP_COUNT))
rotating_log_handeler.setFormatter(formatter)
rotating_log_handeler.setLevel(logging.DEBUG)
logging.getLogger('').addHandler(rotating_log_handeler)


class StandaloneApplication(gunicorn.app.base.BaseApplication):

    def __init__(self, app, options=None):
        self.options = options or {}
        self.application = app
        super().__init__()

    def load_config(self):
        config = {key: value for key, value in self.options.items()
                  if key in self.cfg.settings and value is not None}
        for key, value in config.items():
            self.cfg.set(key.lower(), value)

    def load(self):
        return self.application


def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    if not Config.TOKEN:
        register_dclient()
    else:
        set_state("ACTIVE")

    @app.route("/", methods=["GET"])
    def healthcheck():
        if request.method == "GET":
            return get_healthcheck()

    @app.route("/rollout", methods=["POST"])
    def rollout():
        if request.method == "POST":
            return post_rollout()

    @app.route("/rollback", methods=["POST"])
    def rollback():
        if request.method == "POST":
            return post_rollback()

    @app.route("/versionlock", methods=["GET"])
    def versionlock():
        if request.method == "GET":
            return get_versionlock()


if __name__ == '__main__':
    options = {
        'bind': '%s:%s' % ('0.0.0.0', '8003'),
        'workers': 1,
    }
    StandaloneApplication(create_app, options).run()
